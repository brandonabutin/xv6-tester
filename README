xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.828/, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by Silas
Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800,
Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter
Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander
Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin
Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi
Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat,
Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren
Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

We switched our focus to xv6 on RISC-V; see the mit-pdos/xv6-riscv.git
repository on github.com.

-----------------------------------------------------------------------------

BUILDING AND RUNNING XV6

This repository contains code for viewing purposes only.
In order to run xv6:
- docker pull brandonabutin/xv6-test:aslr
- docker run --rm -it brandonabutin/xv6-test:aslr bash
- make qemu-nox
- Run command 5 times to see stack movement: test_aslr
- Run command to observe copy on write change: test_copy_on_write
- Exit with ctr+a x

Copy on Write Implementation:
In vm.c:
- Add global variables:
    - refcnt: array to keep track of reference count for each page
    - lock: to prevent corruption of global refcnt
- In copyuvm: make PTEs unwritable, remove new page allocation, map child
    page to current page, increase refcnt for current page, reinstall pgtab
- In inituvm: increase refcnt
- In allocuvm: decrease refcnt
- In deallocuvm: decrease refcnt, if refcnt == 0 then free page
- In pagefault: implement page fault handler that allocates a new page when
    you attempt to write to copied pages
- Tests in test_copyonwrite.c

ASLR Implementation:
In proc.h:
- Add new field to proc to keep track of stack location
In exec.c:
- Add psedo-random function
- Initialize stack to pseudorandom number of pages past sz
- Let heap be located directly after program data/code at sz
In vm.c:
- In copyuvm: add second for loop to copy stack data
In syscall.c:
- Remove checks that use sz to verify data is in stack
- Tests in test_aslr.c
